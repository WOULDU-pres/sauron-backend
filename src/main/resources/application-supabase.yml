# Supabase Configuration for Sauron Backend (개인 데모용 단순화)
# 바로 테스트 가능하도록 핵심 설정만 활성화, 복잡한 기능들은 주석 처리

spring:
  application:
    name: sauron-backend

  profiles:
    active: supabase

  # Supabase Database Configuration
  datasource:
    # Supabase connection string format: postgresql://postgres:[DB-PASSWORD]@db.[REF].supabase.co:5432/postgres
    url: jdbc:postgresql://${SUPABASE_DB_HOST:db.your-project-ref.supabase.co}:${SUPABASE_DB_PORT:5432}/${SUPABASE_DB_NAME:postgres}?sslmode=require&stringtype=unspecified
    username: postgres
    password: ${SUPABASE_DB_PASSWORD:}
    driver-class-name: org.postgresql.Driver

    # Supabase connection pool settings (개인 데모용 최적화)
    hikari:
      maximum-pool-size: ${SUPABASE_POOL_MAX_SIZE:5}
      minimum-idle: ${SUPABASE_POOL_MIN_IDLE:1}
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000

  jpa:
    hibernate:
      # Use validate in production, create-drop only for development
      ddl-auto: ${SUPABASE_DDL_AUTO:validate}
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        # Supabase specific optimizations
        jdbc:
          time_zone: UTC
          batch_size: 20
        order_inserts: true
        order_updates: true
        batch_versioned_data: true

  # Disable Flyway for Supabase (use Supabase migrations instead)
  flyway:
    enabled: false
    # Note: Supabase uses its own migration system via CLI
    # Use 'supabase db push' to apply schema changes

  # Redis Configuration (개인 데모에서는 선택사항 - 주석 처리 가능)
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 5000ms
      # Fixed deprecated SSL warning
      ssl:
        enabled: ${REDIS_SSL:false}
      lettuce:
        pool:
          max-active: 8
          max-wait: -1ms
          max-idle: 8
          min-idle: 0

  security:
    jwt:
      secret: ${JWT_SECRET:sauron-jwt-secret-key-for-production-must-be-changed}
      expiration: ${JWT_EXPIRATION:86400000}

# Sauron specific configuration (개인 데모용 단순화)
sauron:
  # Encryption settings for Supabase deployment
  encryption:
    key: ${SAURON_ENCRYPTION_KEY:}
    salt: ${SAURON_ENCRYPTION_SALT:sauron-supabase-salt-2024}

  # Supabase specific settings
  supabase:
    project-url: ${SUPABASE_PROJECT_URL:}
    anon-key: ${SUPABASE_ANON_KEY:}
    service-role-key: ${SUPABASE_SERVICE_ROLE_KEY:}

    # Database roles configuration (개인 데모에서는 단순화)
    roles:
      service: sauron_service
      admin: sauron_admin
      readonly: sauron_readonly

    # Performance settings (개인 데모용 최적화)
    performance:
      enable-connection-pooling: true
      connection-pool-size: 10
      query-timeout: 30000
      batch-size: 50

# Logging configuration (개인 데모용)
logging:
  level:
    com.sauron: ${LOG_LEVEL:INFO}
    org.springframework.web: ${WEB_LOG_LEVEL:WARN}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
    # Supabase client logging
    io.supabase: ${SUPABASE_LOG_LEVEL:INFO}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  # 개인 데모에서는 파일 로깅 선택사항
  # file:
  #   name: ${LOG_FILE_PATH:/var/log/sauron/application.log}

# Server configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api

# API Documentation
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha

# Actuator endpoints for monitoring (개인 데모용 최소 설정)
management:
  endpoints:
    web:
      exposure:
        include: health,info
        # 복잡한 모니터링은 주석 처리
        # include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  # 개인 데모에서는 메트릭 비활성화
  # metrics:
  #   export:
  #     prometheus:
  #       enabled: false

# Gemini AI Configuration
gemini:
  api:
    key: ${GEMINI_API_KEY:}
    endpoint: ${GEMINI_API_ENDPOINT:https://generativelanguage.googleapis.com/v1beta}
    model: ${GEMINI_MODEL:gemini-1.5-flash}
    temperature: ${GEMINI_TEMPERATURE:0.1}
    max-tokens: ${GEMINI_MAX_TOKENS:1000}
  cache:
    enabled: true
    ttl: 300s
  worker:
    enabled: true
    # 개인 데모용 최적화
    threads: ${GEMINI_WORKER_THREADS:2}
    batch-size: ${GEMINI_BATCH_SIZE:5}
    poll-timeout: 5s

# Telegram Bot Configuration (개인 데모용 단순화)
telegram:
  bot:
    token: ${TELEGRAM_BOT_TOKEN:}
    username: ${TELEGRAM_BOT_USERNAME:}
    enabled: ${TELEGRAM_ENABLED:true}
    timeout: 10s
    max-retries: 3
    retry-delay: 1s
  alerts:
    enabled: true
    min-confidence: ${TELEGRAM_MIN_CONFIDENCE:0.7}
    alert-types: spam,advertisement,abuse,inappropriate,conflict
    throttle-minutes: 5
    max-alerts-per-hour: 100
  channels:
    default-chat-id: ${TELEGRAM_DEFAULT_CHAT_ID:}
    # 개인 데모에서는 관리자 채팅 선택사항
    admin-chat-ids: ${TELEGRAM_ADMIN_CHAT_IDS:}

# Admin Configuration (개인 데모에서는 선택사항 - 주석 처리)
# admin:
#   telegram:
#     chat-id: ${ADMIN_TELEGRAM_CHAT_ID:}

# 개인 데모 모드 설정 (기본 활성화)
demo:
  enabled: ${DEMO_MODE:true}
  skip-admin-validation: ${DEMO_SKIP_ADMIN:true}
  simple-auth: ${DEMO_SIMPLE_AUTH:true}

# Application-specific features for Supabase (개인 데모용 단순화)
features:
  # Real-time features using Supabase Realtime (선택사항)
  realtime:
    enabled: ${REALTIME_ENABLED:false}
    channels:
      - messages
      - alerts
      - rooms

  # Analytics and monitoring (개인 데모에서는 비활성화)
  analytics:
    enabled: ${ANALYTICS_ENABLED:false}
    # batch-size: 100
    # flush-interval: 30s

  # Background jobs and scheduling (개인 데모용 단순화)
  jobs:
    enabled: ${BACKGROUND_JOBS_ENABLED:true}
    # Use external cron service or Supabase Edge Functions for scheduling
    use-external-scheduler: false

# Environment-specific overrides
---
# Development profile with Supabase
spring:
  profiles: supabase-dev

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create-drop

  flyway:
    enabled: false

logging:
  level:
    com.sauron: DEBUG
    org.hibernate.SQL: DEBUG

# 개발환경에서도 데모 모드 기본 활성화
demo:
  enabled: true
  skip-admin-validation: true
  simple-auth: true

---
# Production profile with Supabase (운영 환경 시 사용)
spring:
  profiles: supabase-prod

  jpa:
    show-sql: false
    hibernate:
      ddl-auto: validate

  flyway:
    enabled: false

# Production-specific security and performance settings
sauron:
  supabase:
    performance:
      connection-pool-size: 20
      query-timeout: 15000
      batch-size: 100

# 운영 환경에서는 데모 모드 비활성화 가능
demo:
  enabled: ${DEMO_MODE:false}
  skip-admin-validation: ${DEMO_SKIP_ADMIN:false}
  simple-auth: ${DEMO_SIMPLE_AUTH:false}

logging:
  level:
    root: WARN
    com.sauron: INFO
  file:
    name: /var/log/sauron/application.log
    max-size: 100MB
    max-history: 30
