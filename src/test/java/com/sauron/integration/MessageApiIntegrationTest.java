package com.sauron.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sauron.common.queue.MessageQueueService;
import com.sauron.listener.dto.MessageRequest;
import com.sauron.listener.dto.MessageResponse;
import com.sauron.listener.entity.Message;
import com.sauron.listener.repository.MessageRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureTestMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * T-004 Î©îÏãúÏßÄ ÏàòÏã† API ÌÜµÌï© ÌÖåÏä§Ìä∏
 * Ï†ÑÏ≤¥ ÌîåÎ°úÏö∞ Í≤ÄÏ¶ù: Ïù∏Ï¶ù ‚Üí Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù ‚Üí Rate Limit ‚Üí Redis Queue ‚Üí DB Ï†ÄÏû•
 */
@SpringBootTest
@AutoConfigureTestMvc
@ActiveProfiles("test")
@Transactional
class MessageApiIntegrationTest {
    
    @Autowired
    private MockMvc mockMvc;
    
    @Autowired
    private ObjectMapper objectMapper;
    
    @Autowired
    private MessageRepository messageRepository;
    
    @MockBean
    private MessageQueueService messageQueueService;
    
    private static final String API_BASE_URL = "/api/v1/messages";
    
    @BeforeEach
    void setUp() {
        // ÌÅê ÏÑúÎπÑÏä§ Mock ÏÑ§Ï†ï
        when(messageQueueService.enqueueForAnalysis(any(MessageRequest.class)))
                .thenReturn(CompletableFuture.completedFuture(true));
    }
    
    @Test
    @WithMockUser
    void testMessageSubmission_FullWorkflow_Success() throws Exception {
        // Given
        MessageRequest request = createValidMessageRequest();
        
        // When
        MvcResult result = mockMvc.perform(post(API_BASE_URL)
                .with(jwt())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.messageId").value(request.getMessageId()))
                .andExpect(jsonPath("$.status").value("received"))
                .andReturn();
        
        // Then
        MessageResponse response = objectMapper.readValue(
                result.getResponse().getContentAsString(), 
                MessageResponse.class
        );
        
        // 1. API ÏùëÎãµ Í≤ÄÏ¶ù
        assertNotNull(response);
        assertEquals(request.getMessageId(), response.getMessageId());
        assertEquals("received", response.getStatus());
        
        // 2. DB Ï†ÄÏû• Í≤ÄÏ¶ù
        Message savedMessage = messageRepository.findByMessageId(request.getMessageId());
        assertNotNull(savedMessage);
        assertEquals(request.getDeviceId(), savedMessage.getDeviceId());
        assertEquals(request.getChatRoomTitle(), savedMessage.getChatRoomTitle());
        assertEquals("PENDING", savedMessage.getDetectionStatus());
        assertNotNull(savedMessage.getCreatedAt());
    }
    
    @Test
    void testMessageSubmission_WithoutAuthentication_Returns401() throws Exception {
        // Given
        MessageRequest request = createValidMessageRequest();
        
        // When & Then
        mockMvc.perform(post(API_BASE_URL)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isUnauthorized());
    }
    
    @Test
    @WithMockUser
    void testMessageSubmission_InvalidRequest_Returns400() throws Exception {
        // Given - ÌïÑÏàò ÌïÑÎìú ÎàÑÎùΩ
        MessageRequest invalidRequest = new MessageRequest();
        invalidRequest.setMessageId(""); // Îπà Í∞í
        // deviceId, content ÎàÑÎùΩ
        
        // When & Then
        mockMvc.perform(post(API_BASE_URL)
                .with(jwt())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidRequest)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.error").exists())
                .andExpect(jsonPath("$.message").exists());
    }
    
    @Test
    @WithMockUser
    void testMessageSubmission_TooLongContent_Returns400() throws Exception {
        // Given - ÎÑàÎ¨¥ Í∏¥ Î©îÏãúÏßÄ
        MessageRequest request = createValidMessageRequest();
        request.setContent("x".repeat(2001)); // 2000Ïûê Ï¥àÍ≥º
        
        // When & Then
        mockMvc.perform(post(API_BASE_URL)
                .with(jwt())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.error").value("VALIDATION_ERROR"));
    }
    
    @Test
    @WithMockUser
    void testMessageSubmission_QueueFailure_Returns500() throws Exception {
        // Given
        MessageRequest request = createValidMessageRequest();
        
        // Queue Ïã§Ìå® ÏãúÎÆ¨Î†àÏù¥ÏÖò
        when(messageQueueService.enqueueForAnalysis(any(MessageRequest.class)))
                .thenReturn(CompletableFuture.completedFuture(false));
        
        // When & Then
        mockMvc.perform(post(API_BASE_URL)
                .with(jwt())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isInternalServerError())
                .andExpect(jsonPath("$.error").value("QUEUE_ERROR"));
    }
    
    @Test
    @WithMockUser
    void testMessageRetrieval_ExistingMessage_Success() throws Exception {
        // Given - Î©îÏãúÏßÄÎ•º Î®ºÏ†Ä Ï†ÄÏû•
        Message savedMessage = createAndSaveMessage();
        
        // When & Then
        mockMvc.perform(get(API_BASE_URL + "/" + savedMessage.getMessageId())
                .with(jwt()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.messageId").value(savedMessage.getMessageId()))
                .andExpect(jsonPath("$.deviceId").value(savedMessage.getDeviceId()))
                .andExpect(jsonPath("$.detectionStatus").value(savedMessage.getDetectionStatus()));
    }
    
    @Test
    @WithMockUser
    void testMessageRetrieval_NonExistentMessage_Returns404() throws Exception {
        // Given
        String nonExistentMessageId = "non-existent-id";
        
        // When & Then
        mockMvc.perform(get(API_BASE_URL + "/" + nonExistentMessageId)
                .with(jwt()))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$.error").value("MESSAGE_NOT_FOUND"));
    }
    
    @Test
    @WithMockUser
    void testMessageSubmission_Performance_Under1Second() throws Exception {
        // Given
        MessageRequest request = createValidMessageRequest();
        
        // When
        long startTime = System.currentTimeMillis();
        
        mockMvc.perform(post(API_BASE_URL)
                .with(jwt())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isCreated());
        
        long endTime = System.currentTimeMillis();
        long processingTime = endTime - startTime;
        
        // Then - 1Ï¥à Ïù¥ÎÇ¥ Ï≤òÎ¶¨ Í≤ÄÏ¶ù
        assertTrue(processingTime < 1000, 
                   "Processing time should be under 1 second, but was: " + processingTime + "ms");
    }
    
    @Test
    @WithMockUser
    void testMessageSubmission_DuplicateMessageId_Returns409() throws Exception {
        // Given - Ï§ëÎ≥µ Î©îÏãúÏßÄ ID
        MessageRequest request1 = createValidMessageRequest();
        MessageRequest request2 = createValidMessageRequest();
        request2.setMessageId(request1.getMessageId()); // ÎèôÏùºÌïú ID ÏÇ¨Ïö©
        
        // When - Ï≤´ Î≤àÏß∏ Î©îÏãúÏßÄ Ï†ÑÏÜ°
        mockMvc.perform(post(API_BASE_URL)
                .with(jwt())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request1)))
                .andExpect(status().isCreated());
        
        // Then - Îëê Î≤àÏß∏ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïãú Ï∂©Îèå ÏóêÎü¨
        mockMvc.perform(post(API_BASE_URL)
                .with(jwt())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request2)))
                .andExpect(status().isConflict())
                .andExpect(jsonPath("$.error").value("DUPLICATE_MESSAGE_ID"));
    }
    
    @Test
    @WithMockUser
    void testMessageSubmission_SpecialCharacters_Success() throws Exception {
        // Given - ÌäπÏàò Î¨∏Ïûê Ìè¨Ìï® Î©îÏãúÏßÄ
        MessageRequest request = createValidMessageRequest();
        request.setContent("üî•ÌäπÍ∞Ä Ïù¥Î≤§Ìä∏üî• Í¥ëÍ≥†ÏûÖÎãàÎã§! @#$%^&*()_+");
        request.setChatRoomTitle("ÌÖåÏä§Ìä∏Î∞© (ÌäπÏàòÎ¨∏Ïûê)");
        
        // When & Then
        mockMvc.perform(post(API_BASE_URL)
                .with(jwt())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.messageId").value(request.getMessageId()));
    }
    
    @Test
    @WithMockUser
    void testMessageSubmission_EmptyOptionalFields_Success() throws Exception {
        // Given - ÏÑ†ÌÉùÏ†Å ÌïÑÎìúÎì§ÏùÑ ÎπÑÏö¥ ÏöîÏ≤≠
        MessageRequest request = createValidMessageRequest();
        request.setChatRoomTitle(null);
        request.setPriority(null);
        
        // When & Then
        mockMvc.perform(post(API_BASE_URL)
                .with(jwt())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.messageId").value(request.getMessageId()));
        
        // DBÏóêÏÑú Í∏∞Î≥∏Í∞í ÌôïÏù∏
        Message savedMessage = messageRepository.findByMessageId(request.getMessageId());
        assertEquals("normal", savedMessage.getPriority()); // Í∏∞Î≥∏Í∞í
    }
    
    @Test
    @WithMockUser 
    void testConcurrentMessageSubmission_Success() throws Exception {
        // Given - ÎèôÏãú ÏöîÏ≤≠Ïö© Î©îÏãúÏßÄÎì§
        int concurrentRequests = 5;
        MessageRequest[] requests = new MessageRequest[concurrentRequests];
        
        for (int i = 0; i < concurrentRequests; i++) {
            requests[i] = createValidMessageRequest();
            requests[i].setMessageId("concurrent-msg-" + i);
        }
        
        // When - ÎèôÏãú ÏöîÏ≤≠ ÏàòÌñâ
        CompletableFuture<Void>[] futures = new CompletableFuture[concurrentRequests];
        
        for (int i = 0; i < concurrentRequests; i++) {
            final int index = i;
            futures[i] = CompletableFuture.runAsync(() -> {
                try {
                    mockMvc.perform(post(API_BASE_URL)
                            .with(jwt())
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(requests[index])))
                            .andExpect(status().isCreated());
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            });
        }
        
        // Then - Î™®Îì† ÏöîÏ≤≠ ÏôÑÎ£å ÎåÄÍ∏∞
        CompletableFuture.allOf(futures).join();
        
        // Î™®Îì† Î©îÏãúÏßÄÍ∞Ä DBÏóê Ï†ÄÏû•ÎêòÏóàÎäîÏßÄ ÌôïÏù∏
        for (MessageRequest request : requests) {
            Message savedMessage = messageRepository.findByMessageId(request.getMessageId());
            assertNotNull(savedMessage, "Message should be saved: " + request.getMessageId());
        }
    }
    
    /**
     * Ïú†Ìö®Ìïú Î©îÏãúÏßÄ ÏöîÏ≤≠ ÏÉùÏÑ± Ìó¨Ìçº
     */
    private MessageRequest createValidMessageRequest() {
        MessageRequest request = new MessageRequest();
        request.setMessageId(UUID.randomUUID().toString());
        request.setDeviceId("test-device-" + System.currentTimeMillis());
        request.setChatRoomTitle("ÌÖåÏä§Ìä∏ Ï±ÑÌåÖÎ∞©");
        request.setContent("ÏïàÎÖïÌïòÏÑ∏Ïöî! ÌÖåÏä§Ìä∏ Î©îÏãúÏßÄÏûÖÎãàÎã§.");
        request.setPriority("normal");
        return request;
    }
    
    /**
     * ÌÖåÏä§Ìä∏Ïö© Î©îÏãúÏßÄ ÏÉùÏÑ± Î∞è Ï†ÄÏû• Ìó¨Ìçº
     */
    private Message createAndSaveMessage() {
        Message message = Message.builder()
                .messageId("test-msg-" + System.currentTimeMillis())
                .deviceId("test-device")
                .chatRoomTitle("ÌÖåÏä§Ìä∏Î∞©")
                .contentEncrypted("ÌÖåÏä§Ìä∏ Î©îÏãúÏßÄ ÎÇ¥Ïö©")
                .contentHash("test-hash")
                .priority("normal")
                .detectionStatus("PENDING")
                .createdAt(Instant.now())
                .build();
        
        return messageRepository.save(message);
    }
}